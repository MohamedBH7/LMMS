@model IEnumerable<LMMS.Models.BookRequest>

@{
    ViewData["Title"] = "Book Requests";
}

<h1 class="mb-4">Book Requests</h1>

<div class="mb-3 d-flex justify-content-between">
    <input type="text" id="searchInput" class="form-control w-25" placeholder="Search...">
    <select id="filterState" class="form-select w-25">
        <option value="">All States</option>
        <option value="Pending">Pending</option>
        <option value="Approved">Approved</option>
        <option value="Rejected">Rejected</option>
    </select>
</div>

<table class="table table-striped table-hover" id="bookRequestsTable">
    <thead class="table-dark">
        <tr>
            <th onclick="sortTable(0)" style="cursor:pointer;">Title</th>
            <th onclick="sortTable(1)" style="cursor:pointer;">Author</th>
            <th onclick="sortTable(2)" style="cursor:pointer;">Published Year</th>
            <th onclick="sortTable(3)" style="cursor:pointer;">Section</th>
            <th onclick="sortTable(4)" style="cursor:pointer;">State</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var request in Model)
        {
            <tr id="request-@request.Id">
                <td>@request.Title</td>
                <td>@request.Author</td>
                <td>@request.PublishedYear</td>
                <td>@request.SectionName</td>
                <td>
                    <span class="badge" id="state-@request.Id">@request.State</span>
                </td>
                <td>
                    <button class="btn btn-danger" onclick="openConfirmModal('reject', @request.Id)">Reject</button>
                    <button class="btn btn-success" onclick="openConfirmModal('approve', @request.Id)">Approve</button>
                    <button class="btn btn-secondary" onclick="openConfirmModal('delete', @request.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalMessage">Are you sure?</div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmBtn">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        let actionType = '';
        let actionId = 0;

        function openConfirmModal(type, id) {
            actionType = type;
            actionId = id;

            const messages = {
                'reject': 'Are you sure you want to reject this request?',
                'approve': 'Are you sure you want to approve this request?',
                'delete': 'Are you sure you want to delete this request?'
            };

            document.getElementById('modalMessage').innerText = messages[type];
            document.getElementById('confirmBtn').className = `btn btn-${type === 'reject' ? 'danger' : type === 'approve' ? 'success' : 'secondary'}`;

            const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));
            confirmModal.show();
        }

        document.getElementById('confirmBtn').addEventListener('click', async function () {
            let url = '';
            switch (actionType) {
                case 'reject':
                    url = `/api/bookrequests/reject/${actionId}`;
                    break;
                case 'approve':
                    url = `/api/bookrequests/ApprovedRequest/${actionId}`;
                    break;
                case 'delete':
                    url = `/api/bookrequests/delete/${actionId}`;
                    break;
            }

            try {
                const response = await fetch(url, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                });
                if (response.ok) {
                    document.getElementById(`request-${actionId}`).remove();
                }
            } catch (error) {
                console.error('Error:', error);
            }

            bootstrap.Modal.getInstance(document.getElementById('confirmModal')).hide();
        });

        // Get the state class for badges
        function GetStateClass(state) {
            switch (state) {
                case 'Pending': return 'bg-warning text-dark';
                case 'Approved': return 'bg-success';
                case 'Rejected': return 'bg-danger';
                default: return 'bg-secondary';
            }
        }

        // Apply classes dynamically to state badges
        document.querySelectorAll('span[id^="state-"]').forEach(span => {
            const requestId = span.id.split('-')[1];
            const state = document.getElementById(`request-${requestId}`).querySelector('td:nth-child(5)').innerText.trim();
            span.className = `badge ${GetStateClass(state)}`;
        });

        // Search functionality
        document.getElementById('searchInput').addEventListener('keyup', function () {
            let filter = this.value.toLowerCase();
            let rows = document.querySelectorAll('#bookRequestsTable tbody tr');
            rows.forEach(row => {
                row.style.display = row.innerText.toLowerCase().includes(filter) ? '' : 'none';
            });
        });

        // Filter by state functionality
        document.getElementById('filterState').addEventListener('change', function () {
            let filter = this.value;
            let rows = document.querySelectorAll('#bookRequestsTable tbody tr');
            rows.forEach(row => {
                let state = row.cells[4].innerText.trim();
                row.style.display = (filter === '' || state === filter) ? '' : 'none';
            });
        });

        // Sorting functionality
        function sortTable(columnIndex) {
            let table = document.getElementById("bookRequestsTable");
            let rows = Array.from(table.rows).slice(1);
            let isAscending = table.getAttribute("data-sort") === "asc";
            table.setAttribute("data-sort", isAscending ? "desc" : "asc");

            rows.sort((a, b) => {
                let cellA = a.cells[columnIndex].innerText.trim().toLowerCase();
                let cellB = b.cells[columnIndex].innerText.trim().toLowerCase();
                return isAscending ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);
            });

            rows.forEach(row => table.appendChild(row));
        }
    </script>
}
